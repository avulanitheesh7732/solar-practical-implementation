// TM4C123GH6PM - Grid-Tied Inverter with SOGI-PLL, MPPT (P&O), and 8-PWM with Full Line-by-Line Comments

#include <stdint.h>
#include <stdbool.h>
#include <math.h>
#include "tm4c123gh6pm.h"
#include "driverlib/sysctl.h"
#include "driverlib/adc.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "driverlib/pwm.h"

// === Constant Definitions ===
#define PI 3.1415926f                              // Value of Pi
#define GRID_FREQ 50.0f                            // Grid frequency in Hz
#define ISR_FREQ 50000.0f                          // Interrupt frequency in Hz
#define DELTA_T (1.0f / ISR_FREQ)                  // Time step
#define VREF_ADC 3.3f                              // ADC reference voltage
#define SYS_CLOCK 50000000                         // System clock in Hz
#define MAX_DUTY_CYCLE 0.95f                       // Maximum PWM duty cycle
#define MIN_DUTY_CYCLE 0.05f                       // Minimum PWM duty cycle
#define VGRID_SCALE 100.0f                         // Voltage scaling factor
#define VGRID_ADC_GAIN (VREF_ADC / 4096.0f * VGRID_SCALE) // Gain to convert ADC to voltage
#define PV_SCALE (VREF_ADC / 4096.0f)              // PV ADC scaling factor

// === Data Structures ===
typedef struct {
    float osg_k, osg_x, osg_y;
    float osg_b0, osg_b2, osg_a1, osg_a2;
    float osg_qb0, osg_qb1, osg_qb2;
} SOGI_Coeffs; // SOGI Coefficients

typedef struct {
    float B0_lf, B1_lf, A1_lf;
} LF_Coeffs; // Low-pass filter Coefficients

typedef struct {
    float u[3], osg_u[3], osg_qu[3];
    float u_Q[2], u_D[2], ylf[2];
    float fo, fn;
    float theta[2], sin, cos;
    float delta_T;
    SOGI_Coeffs osg_coeff;
    LF_Coeffs lpf_coeff;
} SPLL_1ph_SOGI; // SOGI-PLL Structure

// === Global Variables ===
SPLL_1ph_SOGI pll;                        // PLL structure instance
volatile float pv_voltage = 0, pv_current = 0, pv_power = 0;
volatile float duty_cycle = 0.5f;         // Initial duty cycle
float Dold = 0.5f, Vold = 0, Pold = 0;    // MPPT memory values

// === SOGI-PLL Initialization ===
void SPLL_Init(SPLL_1ph_SOGI *pll, float grid_freq, float delta_T) {
    pll->delta_T = delta_T;                          //How often are we checking the grid
    pll->fn = grid_freq;                             //What’s the expected grid frequency
    pll->fo = 0.0f;                                   // This is our guess of the actual frequency.
    pll->theta[0] = pll->theta[1] = 0.0f;              //It shows where we are on the sine wave.
    pll->sin = 0.0f;                                  //align to the grid like rotating a compass needle.
    pll->cos = 1.0f;

    // LPF coefficients
    pll->lpf_coeff.B0_lf = 166.877f;
    pll->lpf_coeff.B1_lf = -166.322f;
    pll->lpf_coeff.A1_lf = -1.0f;

    // SOGI filter coefficients
    float wn = 2 * PI * grid_freq;    
    float k = 0.5f;
    pll->osg_coeff.osg_k = k;                                                      //using trapezoidal approxiamation
    pll->osg_coeff.osg_x = 2 * k * wn * delta_T;                                   // x = 2 * k * ωn * Ts
    pll->osg_coeff.osg_y = wn * wn * delta_T * delta_T;                            // y = (ωn * Ts)^2
    float temp = 1.0f / (pll->osg_coeff.osg_x + pll->osg_coeff.osg_y + 4.0f);      //using many times
    
    pll->osg_coeff.osg_b0 = pll->osg_coeff.osg_x * temp;                                       // ( x / (x + y + 4) )
    pll->osg_coeff.osg_b2 = -pll->osg_coeff.osg_b0;                                            // ( -x / (x + y + 4) )
    pll->osg_coeff.osg_a1 = 2.0f * (4.0f - pll->osg_coeff.osg_y) * temp;                        //(2 * (4 - y)) / (x + y + 4))
    pll->osg_coeff.osg_a2 = (pll->osg_coeff.osg_x - pll->osg_coeff.osg_y - 4.0f) * temp;         //(x - y - 4) / (x + y + 4)
    pll->osg_coeff.osg_qb0 = 0.5f * pll->osg_coeff.osg_y * temp;                                 //(k*y) / (x + y + 4)
    pll->osg_coeff.osg_qb1 = 2.0f * pll->osg_coeff.osg_qb0;                                    //2 * (k*y) / (x + y + 4)
    pll->osg_coeff.osg_qb2 = pll->osg_coeff.osg_qb0;                                             // (k*y) / (x + y + 4)
}

// === SOGI-PLL Run Function ===
void SPLL_Run(SPLL_1ph_SOGI *pll, float vin) {
    pll->u[2] = pll->u[1]; pll->u[1] = pll->u[0]; pll->u[0] = vin;           // Save the last 3 readings of the voltage
    pll->osg_u[2] = pll->osg_u[1]; pll->osg_u[1] = pll->osg_u[0];             
    pll->osg_u[0] = pll->osg_coeff.osg_b0 * (pll->u[0] - pll->u[2]) + pll->osg_coeff.osg_a1 * pll->osg_u[1] + pll->osg_coeff.osg_a2 * pll->osg_u[2];  // generates the in-phase (α) 
    pll->osg_qu[2] = pll->osg_qu[1]; pll->osg_qu[1] = pll->osg_qu[0];           //computes the quadrature (β) 
    pll->osg_qu[0] = pll->osg_coeff.osg_qb0 * pll->u[0] + pll->osg_coeff.osg_qb1 * pll->u[1] + pll->osg_coeff.osg_qb2 * pll->u[2] + pll->osg_coeff.osg_a1 * pll->osg_qu[1] + pll->osg_coeff.osg_a2 * pll->osg_qu[2];
    pll->u_Q[1] = pll->u_Q[0]; pll->u_D[1] = pll->u_D[0];
    pll->u_Q[0] = pll->cos * pll->osg_u[0] + pll->sin * pll->osg_qu[0];             //q PARK TRANSFORMATIONS
    pll->u_D[0] = pll->cos * pll->osg_qu[0] - pll->sin * pll->osg_u[0];             //d aris
    pll->ylf[1] = pll->ylf[0];                                                      //loop filter(2.1) controller
    pll->ylf[0] = pll->ylf[1] + pll->lpf_coeff.B0_lf * pll->u_Q[0] + pll->lpf_coeff.B1_lf * pll->u_Q[1];
    pll->fo = pll->fn + pll->ylf[0];                                                 // f0=fn+loopfilter
    pll->theta[1] = pll->theta[0];                                                  //accumulates angle θ like a VCO
    pll->theta[0] += pll->fo * pll->delta_T * 2.0f * PI;                          //θ(t + Δt) = θ(t) + ω(t) * Δt (eulers method) 
    if (pll->theta[0] > 2.0f * PI) pll->theta[0] -= 2.0f * PI;
    pll->sin = sinf(pll->theta[0]);                                              // sin/cos for the next Park transformation.
    pll->cos = cosf(pll->theta[0]);
}

// === Grid Voltage ADC Reading ===
float ReadGridVoltageADC() {
    uint32_t val;
    ADCProcessorTrigger(ADC0_BASE, 3);
    while (!ADCIntStatus(ADC0_BASE, 3, false)) {}
    ADCIntClear(ADC0_BASE, 3);
    ADCSequenceDataGet(ADC0_BASE, 3, &val);
    return ((float)val) * VGRID_ADC_GAIN;
}

// === PV Voltage and Current ADC Reading ===
void ReadPV_ADC() {
    uint32_t vals[2];
    ADCProcessorTrigger(ADC0_BASE, 1);
    while (!ADCIntStatus(ADC0_BASE, 1, false)) {}
    ADCIntClear(ADC0_BASE, 1);
    ADCSequenceDataGet(ADC0_BASE, 1, vals);
    pv_voltage = vals[0] * PV_SCALE;
    pv_current = vals[1] * PV_SCALE;
    pv_power = pv_voltage * pv_current;
}

// === MPPT using Perturb & Observe ===
void MPPT_PO() {
    float dV = pv_voltage - Vold;
    float dP = pv_power - Pold;
    float deltaD = 0.005f;

    if (dP != 0.0f) {
        if (dP < 0) {
            if (dV < 0) duty_cycle = Dold - deltaD;
            else duty_cycle = Dold + deltaD;
        } else {
            if (dV < 0) duty_cycle = Dold - deltaD;
            else duty_cycle = Dold + deltaD;
        }
    }

    if (duty_cycle > MAX_DUTY_CYCLE) duty_cycle = MAX_DUTY_CYCLE;
    if (duty_cycle < MIN_DUTY_CYCLE) duty_cycle = MIN_DUTY_CYCLE;

    Vold = pv_voltage;
    Pold = pv_power;
    Dold = duty_cycle;
}

// === PWM Update Function ===
void UpdatePWM() {
    uint32_t pwm_ticks = SYS_CLOCK / 60000;
    uint32_t pulse = pwm_ticks * duty_cycle;
    for (int i = 0; i < 8; i++) PWMPulseWidthSet(PWM0_BASE, i, pulse);
}

// === PWM Initialization ===
void PWM_Init() {
    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);

    GPIOPinConfigure(GPIO_PB4_M0PWM2);
    GPIOPinConfigure(GPIO_PB5_M0PWM3);
    GPIOPinConfigure(GPIO_PB6_M0PWM0);
    GPIOPinConfigure(GPIO_PB7_M0PWM1);
    GPIOPinConfigure(GPIO_PE4_M0PWM4);
    GPIOPinConfigure(GPIO_PE5_M0PWM5);
    GPIOPinConfigure(GPIO_PC4_M0PWM6);
    GPIOPinConfigure(GPIO_PC5_M0PWM7);

    GPIOPinTypePWM(GPIO_PORTB_BASE, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
    GPIOPinTypePWM(GPIO_PORTE_BASE, GPIO_PIN_4 | GPIO_PIN_5);
    GPIOPinTypePWM(GPIO_PORTC_BASE, GPIO_PIN_4 | GPIO_PIN_5);

    for (int g = 0; g < 4; g++) {
        PWMGenConfigure(PWM0_BASE, PWM_GEN_0 + g, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);
        PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0 + g, SYS_CLOCK / 60000);
        PWMGenEnable(PWM0_BASE, PWM_GEN_0 + g);
    }

    for (int i = 0; i < 8; i++) {
        PWMPulseWidthSet(PWM0_BASE, i, (SYS_CLOCK / 60000) / 2);
    }

    PWMOutputState(PWM0_BASE, 0xFF, true);
}

// === Main Function ===
int main(void) {
    // Configure System Clock to 50MHz
    SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

    SPLL_Init(&pll, GRID_FREQ, DELTA_T);  // Initialize PLL
    PWM_Init();                           // Initialize PWM channels

    // Initialize ADC for grid voltage
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_PROCESSOR, 0);
    ADCSequenceStepConfigure(ADC0_BASE, 3, 0, ADC_CTL_CH0 | ADC_CTL_IE | ADC_CTL_END); // AIN0/PE3
    ADCSequenceEnable(ADC0_BASE, 3);
    ADCIntClear(ADC0_BASE, 3);

    // Initialize ADC for PV voltage and current
    ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_PROCESSOR, 0);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_CH1);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 1, ADC_CTL_CH2 | ADC_CTL_IE | ADC_CTL_END); // AIN1/PE2 and AIN2/PE1
    ADCSequenceEnable(ADC0_BASE, 1);
    ADCIntClear(ADC0_BASE, 1);

    while (1) {
        float grid_adc = ReadGridVoltageADC(); // Read grid voltage
        SPLL_Run(&pll, grid_adc);              // Run SOGI-PLL
        ReadPV_ADC();                          // Read PV voltage and current
        MPPT_PO();                             // Run MPPT algorithm
        UpdatePWM();                           // Update PWM with new duty cycle
        SysCtlDelay(50000);                    // ~1ms delay
    }
}
