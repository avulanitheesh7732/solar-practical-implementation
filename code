/*
 * Single-Phase Grid-Tied System with Synchronous Boost and HERIC Inverter
 * Microcontroller: TM4C123GH6PM
 * 
 * Features:
 * - SRF-PLL (Synchronous Reference Frame Phase-Locked Loop) to track grid angle θ
 * - MPPT using Perturb & Observe algorithm
 * - Generation of 8 PWM signals for synchronous boost converter and HERIC inverter
 *
 * Pin Connections:
 * - PV Voltage Sense      -> ADC0 Channel 1 (AIN1, PE2)
 * - PV Current Sense      -> ADC0 Channel 2 (AIN2, PE1)
 * - Grid Voltage Sense    -> ADC0 Channel 0 (AIN0, PE3)
 * - PWM Outputs:
 *     PB4 -> M0PWM2  (Boost Top Switch)
 *     PB5 -> M0PWM3  (Boost Bottom Switch)
 *     PB6 -> M0PWM0  (HERIC Leg A High)
 *     PB7 -> M0PWM1  (HERIC Leg A Low)
 *     PE4 -> M0PWM4  (HERIC Leg B High)
 *     PE5 -> M0PWM5  (HERIC Leg B Low)
 *     PC4 -> M0PWM6  (HERIC Aux 1)
 *     PC5 -> M0PWM7  (HERIC Aux 2)
 */

#include <stdint.h>
#include <stdbool.h>
#include <math.h>  // Required for sinf() and cosf()
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/pin_map.h"
#include "driverlib/gpio.h"
#include "driverlib/pwm.h"
#include "driverlib/adc.h"

#define SYS_CLOCK        50000000    // System clock: 50 MHz
#define GRID_VOLTAGE     230.0f      // RMS grid voltage
#define VREF_PV          5.0f        // ADC reference voltage
#define PI               3.14159265f // Pi constant

// ADC channel assignment for inputs
#define GRID_VOLTAGE_CHANNEL    ADC_CTL_CH0 // PE3
#define PV_VOLTAGE_CHANNEL      ADC_CTL_CH1 // PE2
#define PV_CURRENT_CHANNEL      ADC_CTL_CH2 // PE1

// SRF-PLL PI controller gains
#define PLL_KP     10.0f
#define PLL_KI     1000.0f

// Boost converter limits
#define MAX_DUTY_CYCLE 0.95f
#define MIN_DUTY_CYCLE 0.05f

// Global variables
volatile float alpha = 0.0f;       // Grid voltage signal
volatile float beta = 0.0f;        // 90° phase-shifted version of alpha
volatile float d = 0.0f, q = 0.0f; // dq components
volatile float theta = 0.0f;       // Phase angle
volatile float omega = 0.0f;       // Frequency estimate
volatile float integrator = 0.0f;  // PI controller integral term

volatile float pv_voltage = 0.0f;  // Measured PV voltage
volatile float pv_current = 0.0f;  // Measured PV current
volatile float pv_power   = 0.0f;  // Instantaneous power
volatile float prev_power = 0.0f;  // Previous power for MPPT
volatile float duty_cycle = 0.5f;  // Initial duty for boost PWM

// ADC config for PLL
void SRF_PLL_Init(void) {
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_PROCESSOR, 0);
    ADCSequenceStepConfigure(ADC0_BASE, 3, 0, GRID_VOLTAGE_CHANNEL | ADC_CTL_IE | ADC_CTL_END);
    ADCSequenceEnable(ADC0_BASE, 3);
    ADCSequenceInterruptClear(ADC0_BASE, 3);
}

// ADC config for MPPT
void MPPT_Init(void) {
    ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_PROCESSOR, 0);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 0, PV_VOLTAGE_CHANNEL);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 1, PV_CURRENT_CHANNEL | ADC_CTL_IE | ADC_CTL_END);
    ADCSequenceEnable(ADC0_BASE, 1);
    ADCSequenceInterruptClear(ADC0_BASE, 1);
}

// SRF-PLL logic to extract grid angle
void SRF_PLL_Update(void) {
    uint32_t adc_value;
    ADCProcessorTrigger(ADC0_BASE, 3);
    while (!ADCIntStatus(ADC0_BASE, 3, false)) {}
    ADCIntClear(ADC0_BASE, 3);
    ADCSequenceDataGet(ADC0_BASE, 3, &adc_value);

    alpha = ((float)adc_value / 4096.0f) * GRID_VOLTAGE; // Scale ADC

    static float prev_alpha = 0.0f; // Store previous alpha
    beta += (alpha - prev_alpha) * (1.0f / 314.0f);       // Integrate alpha to get beta
    prev_alpha = alpha;

    float cos_theta = cosf(theta);
    float sin_theta = sinf(theta);
    d = alpha * cos_theta + beta * sin_theta;
    q = -alpha * sin_theta + beta * cos_theta;

    integrator += PLL_KI * q * (1.0f / 50000.0f);
    omega = PLL_KP * q + integrator;

    theta += omega * (1.0f / 50000.0f);
    if (theta > 2 * PI) theta -= 2 * PI;
    if (theta < 0) theta += 2 * PI;
}

// MPPT control logic
void MPPT_Update(void) {
    uint32_t adc_vals[2];
    ADCProcessorTrigger(ADC0_BASE, 1);
    while (!ADCIntStatus(ADC0_BASE, 1, false)) {}
    ADCIntClear(ADC0_BASE, 1);
    ADCSequenceDataGet(ADC0_BASE, 1, adc_vals);

    pv_voltage = adc_vals[0] * (VREF_PV / 4096.0f);
    pv_current = adc_vals[1] * (VREF_PV / 4096.0f);
    pv_power = pv_voltage * pv_current;

    if (pv_power > prev_power) {
        duty_cycle += 0.005f;
        if (duty_cycle > MAX_DUTY_CYCLE) duty_cycle = MAX_DUTY_CYCLE;
    } else {
        duty_cycle -= 0.005f;
        if (duty_cycle < MIN_DUTY_CYCLE) duty_cycle = MIN_DUTY_CYCLE;
    }
    prev_power = pv_power;
}

// PWM initialization for all 8 channels
void PWM_Init(void) {
    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);

    GPIOPinConfigure(GPIO_PB4_M0PWM2);
    GPIOPinConfigure(GPIO_PB5_M0PWM3);
    GPIOPinConfigure(GPIO_PB6_M0PWM0);
    GPIOPinConfigure(GPIO_PB7_M0PWM1);
    GPIOPinConfigure(GPIO_PE4_M0PWM4);
    GPIOPinConfigure(GPIO_PE5_M0PWM5);
    GPIOPinConfigure(GPIO_PC4_M0PWM6);
    GPIOPinConfigure(GPIO_PC5_M0PWM7);

    GPIOPinTypePWM(GPIO_PORTB_BASE, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
    GPIOPinTypePWM(GPIO_PORTE_BASE, GPIO_PIN_4 | GPIO_PIN_5);
    GPIOPinTypePWM(GPIO_PORTC_BASE, GPIO_PIN_4 | GPIO_PIN_5);

    PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);
    PWMGenConfigure(PWM0_BASE, PWM_GEN_1, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);
    PWMGenConfigure(PWM0_BASE, PWM_GEN_2, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);
    PWMGenConfigure(PWM0_BASE, PWM_GEN_3, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);

    uint32_t pwm_period = SYS_CLOCK / 60000;
    PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0, pwm_period);
    PWMGenPeriodSet(PWM0_BASE, PWM_GEN_1, pwm_period);
    PWMGenPeriodSet(PWM0_BASE, PWM_GEN_2, pwm_period);
    PWMGenPeriodSet(PWM0_BASE, PWM_GEN_3, pwm_period);

    for (int i = 0; i < 8; i++) {
        PWMPulseWidthSet(PWM0_BASE, i, pwm_period * 0.5f);
    }

    PWMOutputState(PWM0_BASE, 0xFF, true);
    PWMGenEnable(PWM0_BASE, PWM_GEN_0);
    PWMGenEnable(PWM0_BASE, PWM_GEN_1);
    PWMGenEnable(PWM0_BASE, PWM_GEN_2);
    PWMGenEnable(PWM0_BASE, PWM_GEN_3);
}

// Update PWM duty cycle for all channels
void UpdatePWM(void) {
    uint32_t pwm_ticks = SYS_CLOCK / 60000;
    uint32_t pulse = pwm_ticks * duty_cycle;

    for (int i = 0; i < 8; i++) {
        PWMPulseWidthSet(PWM0_BASE, i, pulse);
    }
}

int main(void) {
    SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

    SRF_PLL_Init();
    MPPT_Init();
    PWM_Init();

    while (1) {
        SRF_PLL_Update();
        MPPT_Update();
        UpdatePWM();
        SysCtlDelay(50000); // Approx 1ms delay
    }
}
